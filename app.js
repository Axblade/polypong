// Generated by CoffeeScript 1.3.3
(function() {
  var Game, app, cookie, count, detect_move, express, game, io, port, routes;

  express = require('express');

  routes = require('./routes');

  io = require('socket.io');

  cookie = require('cookie');

  Game = require('./game/game');

  detect_move = require('./game/game');

  app = module.exports = express.createServer();

  app.configure(function() {
    app.set("views", __dirname + "/views");
    app.set("view engine", "jade");
    app.use(express.bodyParser());
    app.use(express.cookieParser());
    app.use(express.session({
      secret: 'thisisasecretnobodyshouldseehoweverthisisdevwhowantstohackponggameanyway?'
    }));
    app.use(express.methodOverride());
    app.use(app.router);
    return app.use(express["static"](__dirname + "/public"));
  });

  app.configure('development', function() {
    return app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  });

  port = process.env['app_port'] || 3000;

  app.configure('production', function() {
    return app.use(express.errorHandler());
  });

  app.get('/', routes.index);

  app.get('/about', routes.about);

  app.get('/login', routes.loginPage);

  app.post('/login', routes.loginAction);

  app.listen(port);

  console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);

  game = new Game;

  count = 0;

  io = io.listen(app);

  io.sockets.on('connection', function(socket) {
    var sid;
    sid = cookie.parse(socket.handshake.headers.cookie)['connect.sid'];
    console.log("Have a connection: " + sid + " (socket id: " + socket.id + ")");
    socket.on('join', function(data) {
      if (sid in game.gamers) {
        game.tellSide(sid);
        game.sendMove(sid);
        return;
      }
      if (count === 2) {
        socket.emit('busy');
        return;
      }
      console.log("I can has join: " + sid);
      game.addGamer(sid, socket, count);
      game.sendMove(sid);
      return count++;
    });
    socket.on('state', function(data) {
      console.log("Player " + data.side + " moving " + data.state);
      game.setState(sid, data.state);
      game.detectMove();
      return game.sendMoveAll();
    });
    return socket.on('disconnect', function() {
      if (!(sid in game.gamers && game.gamers[sid].socket.id === socket.id)) {
        return;
      }
      console.log("Disconnecting: " + sid);
      game.oneQuitted(sid);
      return count--;
    });
  });

}).call(this);

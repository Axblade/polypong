# Here is all our socket machimery.
# We have server events:
# - join - user joins the game
# - state - user updates his position
# - disconnect - user disconnects
# And we have client events, generated by server:
# - joined - tell him about success join and which side he will be playing (left or right for now)
# - state - update his and enemies position
# - quit - some user quitted

cookie = require 'cookie'
timers = require 'timers'

module.exports = class Game

  constructor: ->
    @fieldHeight = 440
    @fieldWidth = 780

    @racketStep = 10
    @racketHeight = 55
    @racketWidth = 10

    @ballSize = 8
    @ballPosition = [@fieldWidth / 2, @fieldHeight / 2]
    @ball_v = 200 # pixels per second
    @dt = 20
    @dt_in_sec = @dt/1000
    @angle = (20 + Math.random()*50)*Math.PI/180

    @gamers = {}
    initPos = @fieldHeight / 2 - 40
    @yPositions = [initPos - @racketHeight, initPos + @racketHeight]
    @xOffset = 20
    @count = 0

    @gameLoop()


  addGamer: (sid, socket, side) ->
    @gamers[sid] = {socket: socket, state: 0, side: side, pos: @yPositions[side]}
    @tellSide sid

  tellSide: (sid) ->
    @gamers[sid].socket.emit 'joined', @gamers[sid].side

  sendMove: (sid) ->
    @gamers[sid].socket.emit 'move', {positions: @yPositions}

  sendMoveAll: ->
    for sid of @gamers
      @sendMove sid

  setState: (sid, state) ->
    @gamers[sid].state = state

  detectMove: ->
    for sid, gamer of @gamers
      if gamer.state == -1
        gamer.pos -= @racketStep
      else if gamer.state == 1
        gamer.pos += @racketStep
      gamer.pos = 0 if gamer.pos < 0
      gamer.pos = @fieldHeight - @racketHeight if gamer.pos > @fieldHeight - @racketHeight
      @yPositions[gamer.side] = gamer.pos

  detectBallMove: ->
    ds = @ball_v * @dt_in_sec
    @ballPosition[0] += ds * Math.cos(@angle)
    @ballPosition[1] += ds * Math.sin(@angle)
    #console.log "Ball position: #{@ballPosition[0]}, #{@ballPosition[1]}"

    if @ballPosition[0] < 0
      @ballPosition[0] = 0
      @angle = Math.PI - @angle
      return
    if @ballPosition[0] > @fieldWidth - @ballSize
      @ballPosition[0] = @fieldWidth - @ballSize
      @angle = Math.PI - @angle
      return
    if @ballPosition[1] < 0
      @ballPosition[1] = 0
      @angle = - @angle
      return
    if @ballPosition[1] > @fieldHeight - @ballSize
      @ballPosition[1] = @fieldHeight - @ballSize
      @angle = - @angle
      return

    ballInRacket = @ballPosition[1] >= @yPositions[0] && @ballPosition[1] <= @ballPosition[0] + @racketHeight
    if @ballPosition[0] < @xOffset && ballInRacket
      @ballPosition[0] = @xOffset
      @angle = Math.PI - @angle
      return
    ballInRacket = @ballPosition[1] >= @yPositions[1] && @ballPosition[1] <= @yPositions[1] + @racketHeight
    if @ballPosition[0] > @fieldWidth - @xOffset && ballInRacket
      @ballPosition[0] = @fieldWidth - @xOffset - @ballSize
      @angle = Math.PI - @angle
      return

  gameLoop: ->
    console.log 'loop started'
    timers.setInterval =>
      @gameStep()
    , @dt

  gameStep:  ->
    @detectMove()
    @detectBallMove()
    @sendMoveAll()

  oneQuitted: (sidQuit) ->
    delete @gamers[sidQuit]
    for sid, gamer of @gamers
      gamer.socket.emit('quit', sid) if (sidQuit != sid)

  connect: (socket) ->
    sid = cookie.parse(socket.handshake.headers.cookie)['connect.sid']
    console.log "Have a connection: #{sid} (socket id: #{socket.id})"

    self = @
    socket.on 'join', (data) ->
      if sid of self.gamers
        self.tellSide sid
        self.sendMove sid
        return
      if self.count == 2
        socket.emit 'busy'
        return
      console.log "I can has join: #{sid}"
      self.addGamer sid, socket, self.count
      self.sendMove sid
      self.count++

    socket.on 'state', (data) ->
      console.log "Player #{data.side} moving #{data.state}"
      self.setState sid, data.state

    socket.on 'disconnect', ->
      return unless sid of self.gamers && self.gamers[sid].socket.id == socket.id
      console.log "Disconnecting: #{sid}"
      self.oneQuitted sid
      self.count--

# Here is all our socket machimery.
# We have server events:
# - join - user joins the game
# - state - user updates his position
# - disconnect - user disconnects
# And we have client events, generated by server:
# - joined - tell him about success join and which side he will be playing (left or right for now)
# - state - update his and enemies position
# - quit - some user quitted

module.exports = class Game

  constructor: ->
    @gamers = {}
    initPos = 440 / 2 - 40
    @positions = [initPos - 60, initPos + 60]

  addGamer: (sid, socket, side) ->
    @gamers[sid] = {socket: socket, state: 0, side: side, pos: @positions[side]}
    @tellSide sid

  tellSide: (sid) ->
    @gamers[sid].socket.emit 'joined', @gamers[sid].side

  sendMove: (sid) ->
    @gamers[sid].socket.emit 'move', {positions: @positions}

  sendMoveAll: ->
    for sid of @gamers
      @sendMove sid

  setState: (sid, state) ->
    @gamers[sid].state = state

  detectMove: ->
    for sid, gamer of @gamers
      if gamer.state == -1
        gamer.pos -= 10
      else if gamer.state == 1
        gamer.pos += 10
      gamer.pos = 0 if gamer.pos < 0
      gamer.pos = 440 - 55 if gamer.pos > 440 - 55
      @positions[gamer.side] = gamer.pos

  oneQuitted: (sidQuit) ->
    delete @gamers[sid]
    for sid, gamer of @gamers
      gamer.socket.emit 'quit', sid if (sidQuit != sid)

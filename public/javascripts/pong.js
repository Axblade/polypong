// Generated by CoffeeScript 1.3.3
(function() {
  var Game,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Game = Game = (function(_super) {

    __extends(Game, _super);

    function Game() {
      Game.__super__.constructor.call(this);
      this.upPressed = false;
      this.downPressed = false;
      this.side = 0;
      this.enemySide = 1;
      this.scores = [0, 0];
      this.updateScoreFlag = true;
      this.keyLeft = 37;
      this.keyUp = 38;
      this.keyRight = 39;
      this.keyDown = 40;
      this.keySpace = 32;
      this.startPos = [[10, 80], [760, this.canvasHeight - 80 - this.racketHeight]];
      this.racketColor = '#fff';
    }

    Game.prototype.drawRacket = function(x, y, color) {
      this.ctx.fillStyle = color;
      return this.ctx.fillRect(x, y, this.racketWidth, this.racketHeight);
    };

    Game.prototype.drawBall = function(x, y) {
      this.ctx.fillStyle = "rgb(200, 200, 200)";
      return this.ctx.fillRect(x, y, this.ballSize, this.ballSize);
    };

    Game.prototype.drawBoard = function() {
      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
      this.ctx.fillStyle = "rgb(200, 200, 200)";
      this.ctx.fillRect(389, 5, 1, 430);
      this.drawRacket(this.startPos[this.side][0], this.gs[this.side].pos, this.racketColor);
      this.drawRacket(this.startPos[this.enemySide][0], this.gs[this.enemySide].pos, this.racketColor);
      return this.drawBall(this.ballPosition[0], this.ballPosition[1]);
    };

    Game.prototype.gameLoop = function() {
      this.updateState();
      this.drawBoard();
      if (this.updateScoreFlag) {
        return this.updateScores();
      }
    };

    Game.prototype.updateState = function() {
      var enemy, me;
      this.updateBall();
      enemy = this.gs[this.enemySide];
      enemy.pos = this.moveRacket(enemy.state, enemy.pos);
      me = this.gs[this.side];
      return me.pos = this.moveRacket(this.dir(), me.pos);
    };

    Game.prototype.dir = function() {
      if (this.upPressed) {
        return this.dirUp;
      } else if (this.downPressed) {
        return this.dirDown;
      } else {
        return this.dirIdle;
      }
    };

    Game.prototype.updateBall = function() {
      this.moveBall();
      return this.checkBallCollision();
    };

    Game.prototype.keyboardDown = function(evt) {
      switch (evt.which) {
        case this.keyDown:
          this.downPressed = true;
          this.upPressed = false;
          return this.sendState(this.dirDown);
        case this.keyUp:
          this.upPressed = true;
          this.downPressed = false;
          return this.sendState(this.dirUp);
      }
    };

    Game.prototype.keyboardUp = function(evt) {
      switch (evt.which) {
        case this.keyDown:
          this.downPressed = false;
          if (!this.upPressed) {
            return this.sendState(this.dirIdle);
          }
          break;
        case this.keyUp:
          this.upPressed = false;
          if (!this.downPressed) {
            return this.sendState(this.dirIdle);
          }
      }
    };

    Game.prototype.sendState = function(dir) {
      return this.socket.emit('state', {
        state: dir,
        side: this.side
      });
    };

    Game.prototype.updateScores = function() {
      $('#score_' + this.side).text(this.scores[this.side]);
      $('#score_' + this.enemySide).text(this.scores[this.enemySide]);
      return this.updateScoreFlag = false;
    };

    Game.prototype.startGame = function() {
      var canvas,
        _this = this;
      canvas = document.getElementById('game_board_canvas');
      this.ctx = canvas.getContext('2d');
      return setInterval((function() {
        return _this.gameLoop();
      }), this.dt);
    };

    Game.prototype.start = function(socket) {
      var _this = this;
      this.socket = socket;
      socket.on('connect', function() {
        return console.log("Socket opened, Master!");
      });
      socket.on('joined', function(side) {
        _this.side = side;
        _this.enemySide = side === 0 ? 1 : 0;
        $(window).on('keydown', function(e) {
          return _this.keyboardDown(e);
        });
        return $(window).on('keyup', function(e) {
          return _this.keyboardUp(e);
        });
      });
      socket.on('move', function(data) {
        _this.gs = data.gamers;
        _this.ballPosition = data.ball.pos;
        _this.ballV = data.ball.v;
        return _this.angle = data.ball.angle;
      });
      socket.on('score', function(data) {
        _this.scores = data.scores;
        return _this.updateScoreFlag = true;
      });
      socket.on('busy', function(data) {});
      socket.on('disconnect', function() {
        $(window).off('keydown');
        return $(window).off('keyup');
      });
      socket.emit('join');
      return this.startGame();
    };

    return Game;

  })(GameCore);

}).call(this);

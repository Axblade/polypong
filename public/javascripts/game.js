// Generated by CoffeeScript 1.3.3
(function() {
  var Game;

  window.Game = Game = (function() {

    Game.canvas_width = 700;

    Game.canvas_height = 400;

    Game.racket_height = 55;

    Game.racket_width = 10;

    Game.dy = 5;

    Game.key_left = 37;

    Game.key_up = 38;

    Game.key_right = 39;

    Game.key_down = 40;

    Game.players_pos = [10, 680];

    function Game() {
      this.up_pressed = false;
      this.down_pressed = false;
      this.y_position = 10;
      this.side = 0;
      this.enemy_side = 1;
    }

    Game.prototype.drawRacket = function(x, y, color) {
      this.ctx.fillStyle = color;
      return this.ctx.fillRect(x, y, Game.racket_width, Game.racket_height);
    };

    Game.prototype.drawBall = function(x, y) {
      this.ctx.fillStyle = "rgb(100, 100, 0)";
      this.ctx.arc(x, y, 5, 0, Math.PI * 2, true);
      return this.ctx.fill();
    };

    Game.prototype.drawBoard = function() {
      this.processInputs();
      this.ctx.clearRect(0, 0, Game.canvas_width, Game.canvas_height);
      this.drawRacket(Game.players_pos[this.side], this.y_position, "rgb(200,0,0)");
      this.drawRacket(Game.players_pos[this.enemy_side], 10, "rgb(0,0,200)");
      return this.drawBall(100, 100);
    };

    Game.prototype.keyboardDown = function(evt) {
      switch (evt.which) {
        case Game.key_down:
          this.down_pressed = true;
          return this.up_pressed = false;
        case Game.key_up:
          this.up_pressed = true;
          return this.down_pressed = false;
      }
    };

    Game.prototype.keyboardUp = function(evt) {
      switch (evt.which) {
        case Game.key_down:
          return this.down_pressed = false;
        case Game.key_up:
          return this.up_pressed = false;
      }
    };

    Game.prototype.processInputs = function() {
      if (this.up_pressed) {
        return this.y_position -= Game.dy;
      } else if (this.down_pressed) {
        return this.y_position += Game.dy;
      }
    };

    Game.prototype.startGame = function() {
      var canvas, self;
      canvas = document.getElementById('game_board_canvas');
      this.ctx = canvas.getContext('2d');
      this.drawBoard();
      self = this;
      return setInterval((function() {
        return self.drawBoard();
      }), 20);
    };

    Game.prototype.start = function(socket) {
      var self;
      self = this;
      socket.on('connect', function() {
        return console.log("Socket opened, Master!");
      });
      socket.on('state', function(data) {
        return console.log("Whoa, he moved");
      });
      socket.on('joined', function(side) {
        self.side = side;
        self.enemy_side = side === 0 ? 1 : 0;
        $(window).on('keydown', function(e) {
          return self.keyboardDown(e);
        });
        return $(window).on('keyup', function(e) {
          return self.keyboardUp(e);
        });
      });
      socket.emit('join');
      socket.emit('state', {
        moved: Math.random()
      });
      return this.startGame();
    };

    return Game;

  })();

}).call(this);
